<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Flatiron&nbsp;school | Coding Flatironically]]></title>
  <link href="http://jeffslutzky.github.io/blog/categories/flatiron-school/atom.xml" rel="self"/>
  <link href="http://jeffslutzky.github.io/"/>
  <updated>2015-10-20T19:22:18-04:00</updated>
  <id>http://jeffslutzky.github.io/</id>
  <author>
    <name><![CDATA[Jeff Slutzky]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Back to the Future With Cron Jobs and Ruby Gems]]></title>
    <link href="http://jeffslutzky.github.io/blog/2015/10/21/back-to-the-future-with-cron-jobs-and-ruby-gems/"/>
    <updated>2015-10-21T08:25:00-04:00</updated>
    <id>http://jeffslutzky.github.io/blog/2015/10/21/back-to-the-future-with-cron-jobs-and-ruby-gems</id>
    <content type="html"><![CDATA[<p>It&rsquo;s <em>Back to the Future</em> Day!</p>

<iframe width="840" height="473" src="https://www.youtube.com/embed/nT9Drje0Fwc" frameborder="0" allowfullscreen></iframe>


<p><em>Back to the Future</em> is my all-time favorite movie &ndash;  and the sequels are a close second and third &ndash; so this is a pretty special day. To celebrate, I&rsquo;ll discuss time travel!</p>

<p>Sort of. I&rsquo;ll discuss cron jobs.</p>

<p>A cron job is a way to schedule tasks ahead of time in Unix-type command-line systems such as the Mac Terminal &ndash; for example, sending out an email, updating a file at the same time every day, and so on. Tasks can be scheduled for a particular time or at regular intervals &ndash; daily, weekly, etc.</p>

<p>I decided I wanted to tweet something on October 21, 2015, at 4:29 p.m., to celebrate the exact time Marty McFly arrives from 1985. I wanted to preschedule my tweet, so it could go out even if I&rsquo;m away from my computer at the time (as long as my computer is running). First I tried some web apps, but I couldn&rsquo;t get tweets to appear at the exact time I wanted. So I turned to the command line.</p>

<!-- more -->


<p><em>(1) Using the &ldquo;t&rdquo; Ruby gem</em></p>

<p>The first thing I did was install <a href="https://github.com/sferik/t">a Ruby gem called t</a>, which provides command-line access to Twitter:</p>

<pre>gem install t</pre>


<p>After connecting your Twitter account to the gem by following the instructions on the gem&rsquo;s <a href="https://github.com/sferik/t">GitHub page</a>, you can tweet directly from the command line by typing</p>

<pre>t update "[text of your tweet]"</pre>


<p>The text of your tweet will immediately show up on Twitter as a tweet from your account.</p>

<p>But what if you want to pre-schedule a tweet? You&rsquo;ll need to set up a <a href="https://en.wikipedia.org/wiki/Cron">cron job</a>.</p>

<p><em>(2) Setting up a cron job</em></p>

<p>This involves two steps: (a) setting up a file that contains your &ldquo;t&rdquo; command, and (b) setting up the actual cron job.</p>

<p><em>(a) Setting up the file containing your &ldquo;t&rdquo; command</em></p>

<p>The best place to create this file is in your home directory. To find out where this is, type:</p>

<pre>echo $HOME</pre>


<p>Or you can go there directly by typing</p>

<pre>cd $HOME</pre>


<p>In your home directory, create a new file with a .sh extension, which is the extension for a shell script:</p>

<pre>touch [filename].sh</pre>


<p>Open this empty file in your text editor. At the top of the empty file, type</p>

<pre>#!/bin/bash</pre>


<p>(The exact path might be different on different computers, but this worked for me on a Mac.)</p>

<p>Next, you can type &ldquo;t update &rdquo;[tweet text], but you have to preface the &ldquo;t&rdquo; with something. Ruby Version Manager (rvm) creates wrappers for gems, and you need to preface the &ldquo;t&rdquo; with the path for the wrappers. <a href="https://rvm.io/deployment/cron">This link</a> helped me figure that path out. For me, that path is /Users/jeffslutzky/.rvm/wrappers/ruby-2.2.3, so the full path to &ldquo;t&rdquo; is:</p>

<pre>/Users/jeffslutzky/.rvm/wrappers/ruby-2.2.3/t</pre>


<p>And therefore the full command is:</p>

<pre>/Users/jeffslutzky/.rvm/wrappers/ruby-2.2.3/t update ["tweet text]"</pre>


<p>So the full file is these two lines:</p>

<pre>#!/bin/bash

/Users/jeffslutzky/.rvm/wrappers/ruby-2.2.3/t update ["tweet text]"</pre>


<p>After creating the shell script, we have to change its permissions, by going back to the command line and typing</p>

<pre>chmod +x [filename].sh</pre>


<p>After creating the shell script and setting its permissions, the next step is to set up the cron job.</p>

<p><em>(b) Setting up the cron job</em></p>

<p>We&rsquo;re actually setting up a crontab, which is the text file that contains the schedule of tasks. I was having problems using my default text editor, Sublime, for crontabs, so I had to set my default crontab editor to Nano by typing this on the command line:</p>

<pre>export VISUAL=nano; crontab -e</pre>


<p>After that, open the crontab file by typing:</p>

<pre>crontab -e</pre>


<p>This file requires one line containing two things: a series of five numbers corresponding to the time we want the task to run, and the path to the shell script we just wrote.</p>

<p>The numbers come in this order: minutes, hours (in 24-hour format), days of month, months, days of week. Anything not used is replaced by an asterisk (*). For example, October 21 at 4:29 pm (i.e. 10/21 at 16:29) is:</p>

<pre>29 16 21 10 *</pre>


<p>That&rsquo;s just <em>10/21 - 16:29</em> in reverse order.</p>

<p>The path to my shell script is:</p>

<pre>/Users/jeffslutzky/bttf.sh</pre>


<p>So, adding this to the time, the full line to type in for this task is:</p>

<pre>29 16 21 10 * /Users/jeffslutzky/bttf.sh</pre>


<p>Save the file. That&rsquo;s it. The tweet is now pre-scheduled. We&rsquo;re all done!</p>

<p>To see the contents of the crontab, type:</p>

<pre>crontab -l</pre>


<p>To edit it again, type:</p>

<pre>crontab -e</pre>


<p>You can even add other tasks to the crontab file by adding a new line with a new time and shell script path.</p>

<p>I&rsquo;ve actually pre-scheduled two tweets. If my calculations are correct, when this baby hits 88 miles per hour, you&rsquo;re gonna see some serious tweets (at <a href="http://twitter.com/tinmanic">twitter.com/tinmanic</a>).</p>

<p>To recap:</p>

<p>(1) Create a file containing a command-line action, and set the file permissions.</p>

<pre>#!/bin/bash

/Users/jeffslutzky/.rvm/wrappers/ruby-2.2.3/t update ["tweet text]"</pre>


<p>(2) Create a new task in the crontab to execute the above file at a chosen time.</p>

<pre>29 16 21 10 * /Users/jeffslutzky/bttf.sh</pre>


<p><em>Helpful links</em></p>

<ul>

<li><a href="https://github.com/sferik/t">the "t" Ruby gem</a></li>

<li><a href="https://developer.apple.com/library/mac/documentation/OpenSource/Conceptual/ShellScripting">Mac Developer Library: Shell Scripting Primer</a></li>

<li><a href="https://rvm.io/deployment/cron">Using RVM with Cron</a></li>

<li><a href="http://www.backtothefuture.com/">Back to the Future fan site</a></li>

<li><a href="http://www.october212015.com/">Countdown to Back to the Future Day</a></li>
</ul>


<p><img src="http://jeffslutzky.github.io/images/delorean.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sublime Hints and Shortcuts]]></title>
    <link href="http://jeffslutzky.github.io/blog/2015/10/04/sublime-hints-and-shortcuts/"/>
    <updated>2015-10-04T16:14:16-04:00</updated>
    <id>http://jeffslutzky.github.io/blog/2015/10/04/sublime-hints-and-shortcuts</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve completed my first week as a student in the <a href="http://www.flatironschool.com">Flatiron School&rsquo;s</a> Web Development Immersive program. It&rsquo;s been exciting and fun and busy and I&rsquo;ve met friendly, interesting people. It&rsquo;s the best experience I&rsquo;ve had in ages.</p>

<p>In this blog post I&rsquo;ll cover <a href="http://www.sublimetext.com/">Sublime</a>. Sublime is the default text editor we use at the Flatiron School; we use it to write all our Ruby programs, and I&rsquo;m using it to write this very blog post. Besides Terminal, it&rsquo;s probably the program we use most often. Therefore, knowing some Sublime tips and shortcuts can help a programmer become much more efficient. One of our instructors sent us a link to a <a href="http://sublime-text-unofficial-documentation.readthedocs.org/en/latest/reference/keyboard_shortcuts_osx.html">whole bunch of Sublime shortcuts</a>. I thought I&rsquo;d cover some of those, and some other tips I&rsquo;ve found most useful so far:</p>

<!-- more -->


<p><em>Setting up your visual environment.</em> Since you&rsquo;ll be staring at the Sublime interface all the time, you&rsquo;ll want the screen to look pleasant. The default environment for Sublime is light text on a black background. I find that to be hard on my eyes, but fortunately you can change this. In the menu, go to Sublime Text > Preferences > Color Scheme. Under this menu, Flatiron&rsquo;s Sublime installation has an option called Colorsublime-Themes, where you can pick Solarized Dark or Solarized Light. I use Solarized Light, which gives you a soothing beige background:</p>

<p><img src="http://jeffslutzky.github.io/images/solarized_light.png"></p>

<p>There are a ton of other options in the menu under Color Scheme - Default.</p>

<p><em>Multiple column view.</em> Most Flatiron labs require getting certain tests to pass. It can be helpful to be able to look at your code and the test at the same time, especally when the test includes some data, such as a sample hash that you need to transform into another hash, or some supplied variables. To do this, you can press OPTION+CONTROL plus the number of columns you want. Pressing OPTION+CTRL+2 will give you two columns, and then you can drag any of the open tabs to any column:</p>

<p><img src="http://jeffslutzky.github.io/images/two_column_view.png"></p>

<p>Since this will give you narrower columns, you can then go to the menu bar and select View > Word Wrap so everything remains on the screen.</p>

<p>To switch back to single-column view, press OPTION+CTRL+1.</p>

<p><em>Comment out a line from anywhere on that line.</em> Often I&rsquo;m using binding.pry to look into my program, but then I want to stop using binding.pry and just see if my tests pass. Instead of repeatedly typing and deleting &ldquo;binding.pry,&rdquo; you can just comment it out by typing COMMAND and the slash key (/). The nice thing is that you don&rsquo;t even have to be on the beginning of the line. If you type COMMAND + / from anywhere on that line, it will put a pound sign at the beginning of the line and comment out the whole line. To un-comment a line, just press COMMAND + / again.</p>

<p><em>Replace every instance of some text with different text.</em> Sometimes you&rsquo;ve named a variable but later decide you want to change it to something else. You can easily change every instance of the variable in your program. Just highlight any instance of the text, and <em>every</em> instance of that text will then have an outline around it:</p>

<p><img src="http://jeffslutzky.github.io/images/highlighted_text.png"></p>

<p>Now, press CTRL+COMMAND+G and you can then edit every single instance of that text at once! Everything you type will affect every instance of that text in your program:</p>

<p><img src="http://jeffslutzky.github.io/images/edited_text.png"></p>

<p>When you&rsquo;re done, click anywhere in your program to stop. So cool.</p>

<p>(Just be careful - if your program contains, for example, &ldquo;item&rdquo; and &ldquo;items,&rdquo; you won&rsquo;t be able to edit &ldquo;item&rdquo; without also editing &ldquo;items.&rdquo;)</p>

<p><em>Move an entire chunk of text up or down.</em> If you want to move some text to a different part of your program - for example, if you want to rearrange the order of your methods - just highlight the lines of text you want to move, then click CTRL-COMMAND and the up-arrow or down-arrow. The entire chunk of text will move up or down a line each time you click.</p>

<p>There are so many other shortcuts in Sublime. It would be hard to <a href="http://sublime-text-unofficial-documentation.readthedocs.org/en/latest/reference/keyboard_shortcuts_osx.html">memorize them all at once</a>, but the more I use Sublime, the more I&rsquo;ll probably become familiar with them. You will, too.</p>

<p>Sublime is&hellip; sublime.</p>
]]></content>
  </entry>
  
</feed>
