<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Flatiron&nbsp;school | Coding Flatironically]]></title>
  <link href="http://jeffslutzky.github.io/blog/categories/flatiron-school/atom.xml" rel="self"/>
  <link href="http://jeffslutzky.github.io/"/>
  <updated>2015-12-10T20:42:49-05:00</updated>
  <id>http://jeffslutzky.github.io/</id>
  <author>
    <name><![CDATA[Jeff Slutzky]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Top Ten Things I Learned at Flatiron School]]></title>
    <link href="http://jeffslutzky.github.io/blog/2015/12/09/the-top-ten-things-i-learned-at-flatiron-school/"/>
    <updated>2015-12-09T23:09:00-05:00</updated>
    <id>http://jeffslutzky.github.io/blog/2015/12/09/the-top-ten-things-i-learned-at-flatiron-school</id>
    <content type="html"><![CDATA[<p>I&rsquo;m nearly done with my 12 weeks as a Web Development Immersive student here at the Flatiron School. I thought I&rsquo;d share the top ten things I&rsquo;ve learned &ndash; the things I&rsquo;d tell new students.</p>

<p><strong>1. Relax.</strong> You might have read that Flatiron requires a commitment of up to 70 hours per week. But much of the time, you&rsquo;ll be having fun! The typical Flatiron day is only loosely structured. When you&rsquo;re not in lecture, you&rsquo;ll most likely be working on labs. This gives lots of opportunity to be social. In the evenings and on the weekends, you&rsquo;ll probably be working on labs and doing some reading assignments. But this is fun, too, because you&rsquo;re learning.</p>

<p><strong>2. You don&rsquo;t have to finish every lab.</strong> On many days, you&rsquo;ll be assigned more labs than most students can possibly complete in a day. The point of doing labs is not to get green lights; it&rsquo;s to learn, and to get coding practice. You won&rsquo;t be penalized for not finishing every lab. There are no grades here! You can always come back to some labs on the weekends or later in the course. A corollary to this is:</p>

<p><strong>3. Get enough sleep.</strong> A good night&rsquo;s sleep is important. You&rsquo;ll learn and retain more during the school day if you get a good night&rsquo;s sleep. There&rsquo;s no need to sacrifice sleep for labs or assignments. You don&rsquo;t need to be a hero.</p>

<p><strong>4. Go easy on yourself.</strong> Don&rsquo;t worry about how well you&rsquo;re doing compared to your classmates. Some people might finish labs faster than you; so what? It&rsquo;s not about speed. You&rsquo;ll all make it to the end of the course. Lots of us tend to focus on people who are doing better than us instead of on those who are doing as well as us. There will be some super-speedy folks in your class. That&rsquo;s okay. You&rsquo;re smart, too, otherwise you wouldn&rsquo;t have gotten accepted to Flatiron.</p>

<p><strong>5. Ask lots of questions.</strong> Don&rsquo;t be afraid to ask questions during lecture if you don&rsquo;t fully understand what&rsquo;s going on. If you don&rsquo;t grasp something, you&rsquo;re probably not the only one. Your classmates will be grateful that you asked. Plus, you&rsquo;re paying a lot of tuition &ndash; ask questions and get your money&rsquo;s worth! That said:</p>

<p><strong>6. Let yourself struggle sometimes.</strong> When you&rsquo;re unsure about something on a lab, try to figure it out on your own or from a classmate before asking an instructor for help &ndash; not because the instructors are busy, but because you&rsquo;ll learn more if you try to figure something out on your own first. Google is your friend. If you&rsquo;re still stuck after a while, definitely talk to an instructor or classmate. You can&rsquo;t learn if have no clue what to do.</p>

<p><strong>7. Step away from the computer. Take breaks.</strong> This is really important. There are many times when I&rsquo;ve been frustrated by a lab and kept metaphorically banging my head against my computer. If this happens to you, it&rsquo;s best to clear your mind and go for a walk. Exercise helps your brain. The solution to your problem might pop into your head when you&rsquo;re doing something else, or you might come back to your computer refreshed and ready to figure it out. It&rsquo;s better than getting mad.</p>

<p><strong>8. Make friends!</strong> This should be easy. My classmates are terrific. At the end of just one week, I felt like I&rsquo;d known them for months. You&rsquo;re all in the same boat &ndash; you can commiserate, drink together, empathize with them. Everything in life is better when you&rsquo;re around good people. Hang out after class on Friday.</p>

<p><strong>9. Enjoy Feelings Friday.</strong> Every Friday afternoon, your class will sit on chairs in a circle and everyone will say how they feel about the past week. I happen to love Feelings Friday, but some people don&rsquo;t like talking about their feelings. If you&rsquo;re one of the latter, remember that someone else might benefit from hearing what you have to say. It&rsquo;s great when someone expresses something that you yourself are feeling.</p>

<p><strong>10. Take time to appreciate being here. It&rsquo;ll go by fast.</strong> You&rsquo;ll be at Flatiron for only about three months. One day you&rsquo;ll realize that half the program has gone by, and then the next thing you know, you&rsquo;ll be working on final projects and your resume. Don&rsquo;t let the whole thing be a blur. Stop and take a mental photograph every so often. You&rsquo;re lucky to be here.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sending Gmail Emails With Rails]]></title>
    <link href="http://jeffslutzky.github.io/blog/2015/11/23/sending-gmail-emails-with-rails/"/>
    <updated>2015-11-23T21:59:02-05:00</updated>
    <id>http://jeffslutzky.github.io/blog/2015/11/23/sending-gmail-emails-with-rails</id>
    <content type="html"><![CDATA[<p>As part of our meetup project, I needed to figure out how to send email via Rails. Our website allows a user to select a favorite photo and then receive a link to that photo via email.</p>

<p>Rails sends email through something called the Action Mailer. The Rails Guides <a href="http://guides.rubyonrails.org/action_mailer_basics.html">explain</a> how to set up Action Mailer, but I needed to take some additional steps that the documentation didn&rsquo;t include. For instance, the guide explains how to send a welcome email after a user signs up, but we wanted to send an email later on - after the user selects a favorite photo. Here is how I got it working for Gmail.</p>

<p>As the guide points out, mailers are conceptually similar to controllers. We generate a mailer via the command line:</p>

<pre>rails generate mailer UserMailer</pre>


<p>This creates a file called <strong>app/mailers/user_mailer.rb</strong>. More on this file later.</p>

<p>We also need to create a new route in <strong>config.routes</strong>:</p>

<pre>get 'users/create', to: 'users#create'</pre>


<p>In our project, the user enters an email address via a form. In the code below, the form_tag directs to the <strong>users/create</strong> action - the <strong>create</strong> method in the User controller - and the e-mail field passes an <strong>:email_address</strong> to the params. And since we want to send the user a photo URL, we pass the photo URL as a hidden field:</p>

<pre><%= form_tag("users/create", method: "get") do %>
&lt;img src="<%=@picture_chosen.photo_url%>"&gt;
&lt;div&gt;
    <%= hidden_field_tag(:photo_url, @picture_chosen.photo_url) %>
    <%= email_field(:user, :email_address) %>
    <%= submit_tag("Submit")%>
<% end %>
&lt;/div&gt;</pre>


<p>On submit, the data passes to the User controller&rsquo;s <strong>create</strong> method:</p>

<pre>class UsersController < ApplicationController

    def create
        @user = User.new(user_params)
        respond_to do |format|
            @user.email_address = params[:user][:email_address]
          @user.photo_url = params[:photo_url]
          if @user.save
            UserMailer.result_email(@user).deliver_now
            format.html { redirect_to(root_path, notice: 'Favorite photo chosen') }
            format.json { render json: root_path, status: :created, location: @user }
          else
            format.html { render action: 'new' }
            format.json { render json: @user.errors, status: :unprocessable_entity }
          end
        end
      end

    private

    def user_params
        params.require(:user).permit(user: [:email_address, :photo_url] )
    end

    end</pre>


<p>The email address gets saved as <strong>@user.email_address</strong>, which we must add to the permitted user params. Upon <strong>@user.save</strong>, we get directed to:</p>

<pre><code>UserMailer.result_email(@user).deliver_now
</code></pre>

<p>UserMailer is the mailer we created at the beginning via <strong>rails generate mailer UserMailer</strong>. (The <strong>deliver_now</strong> at the end sends the email immediately; there is also an option for <strong>deliver_later</strong>.)</p>

<p>So we&rsquo;re directed to the UserMailer, and we need to put the following code in there:</p>

<pre><code>class UserMailer &lt; ApplicationMailer
    def result_email(user)
        @user = user
        @url  = user.photo_url
    mail(to: @user.email_address, subject: 'Your favorite photo')
    end
end
</code></pre>

<p>We&rsquo;re setting the individual user and the photo URL as objects so we can pass them, and the <strong>mail</strong> command specifies the email address and the email subject.</p>

<p>The UserMailer inherits from ApplicationMailer, which, like UserMailer, lives in the app/mailers/ folder. ApplicationMailer needs to contain the email address from which the email will be sent:</p>

<pre><code>    class ApplicationMailer &lt; ActionMailer::Base
      default from: "email_sender@gmail.com"
      layout 'mailer'
    end
</code></pre>

<p>(Replace &ldquo;email_sender&rdquo; with the actual sending account.)</p>

<p>To go along with the UserMailer, there is a corresponding user_mailer folder under app/views/. The user_mailer folder contains two files, <strong>result_email.html.erb</strong> and <strong>result_email.text.erb</strong>. The former sends an HTML-formatted email; the latter contains a text-formatted email, which will be sent if the user&rsquo;s email client doesn&rsquo;t accept HTML-formatted email.</p>

<p>Here&rsquo;s our HTML-formatted email in our <strong>result_email.html.erb</strong> file:</p>

<pre>&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta content='text/html; charset=UTF-8' http-equiv='Content-Type' /&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;h1&gt;Hello!&lt;/h1&gt;
    &lt;p&gt;
      Thanks for picking your favorite photo! Here is a link to the photo you chose as your favorite:
    &lt;/p&gt;
    &lt;p&gt;
      <%= @url %>
    &lt;/p&gt;
  &lt;/body&gt;
&lt;/html&gt;</pre>


<p>Note that since we created a @url object in the UserMailer, we can call it in the email above.</p>

<p>This sets everything up, but the email won&rsquo;t actually get sent unless we add the following code to the three files under config/environments/ &ndash; development.rb, production.rb, and test.rb:</p>

<pre><code>    config.action_mailer.default_url_options = { host: 'localhost', port: 3000 }
    config.action_mailer.delivery_method = :smtp
    config.action_mailer.raise_delivery_errors = true
    config.action_mailer.smtp_settings =  {
      :address    =&gt; "smtp.gmail.com",
      :port       =&gt; 587,
      :domain     =&gt; 'localhost',
      :user_name  =&gt; ENV["gmail_username"],
      :password   =&gt; ENV["gmail_password"],
      :authentication   =&gt; :login,
      :enable_starttls_auto   =&gt; true
      }
</code></pre>

<p>This works for Gmail. Other email clients will require slightly different settings.</p>

<p>Note that <strong>:user_name</strong> and <strong>:password</strong> are ENV keys, because these are the sender&rsquo;s username and password, and we don&rsquo;t want the password to be visible to others. We should also install the <a href="https://github.com/laserlemon/figaro">Figaro gem</a> and require it in the Gemfile. This creates a file called config/application.yml, which gets added to the .gitignore file and will keep the email name and password hidden. Open this file and add the following (replacing the sample user name and password with the real ones):</p>

<pre>gmail_username: "emailer_sender@gmail.com"
gmail_password: "123456789"</pre>


<p>Make sure &ldquo;gmail_username&rdquo; and &ldquo;gmail_password&rdquo; are spelled the same in both the config/environments files and the config/application.yml file.</p>

<p>And we&rsquo;re done. Your application can now send email.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactoring Your Code After Adding a Feature]]></title>
    <link href="http://jeffslutzky.github.io/blog/2015/11/05/refactoring-your-code-after-adding-a-feature/"/>
    <updated>2015-11-05T19:08:57-05:00</updated>
    <id>http://jeffslutzky.github.io/blog/2015/11/05/refactoring-your-code-after-adding-a-feature</id>
    <content type="html"><![CDATA[<p>This has been project week at Flatiron, and while designing our websites we&rsquo;ve been learning to follow the principle of <em>minimum viable product</em>, or <em>MVP</em>. This <a href="http://leanstack.com/minimum-viable-product/">basically means</a> &ldquo;the smallest thing you can build that lets you quickly make it around the build/measure/learn loop&rdquo; or &ldquo;the smallest thing you can build that delivers customer value (and as a bonus captures some of that value back).&rdquo;</p>

<p>The idea is to start by building a simple product that works before adding new features. Here&rsquo;s the image we were shown in class that illustrates MVP:</p>

<p><img src="http://jeffslutzky.github.io/images/how-to-build-a-minimum-viable-product.jpg"></p>

<p>Our group decided to build a site that maps out public restrooms in New York City so users can easily find a place to answer nature&rsquo;s call. Users can review existing restrooms and even add restrooms to the site&rsquo;s database. In creating our site, we found it useful to follow the MVP principle, but this created some issues we had to fix later on.</p>

<p>There&rsquo;s an <a href="https://data.cityofnewyork.us/Recreation/Directory-Of-Toilets-In-Public-Parks/hjae-yuav">existing database</a> of public restrooms in New York City public parks, so we decided that our MVP was to build a map showing all these restrooms. Only after we&rsquo;d built out this minimum product and had it working would we build the next feature: letting users add restrooms to the database.</p>

<p><img src="http://jeffslutzky.github.io/images/mvp_boat.jpg"><br>
<a href="http://transformcustomers.com/minimum-viable-product-how-it-helps-time-to-market/">credit</a></p>

<p>When we built out our MVP, we created a table in our database called <em>public_parks</em>. We also had a PublicParks controller, a PublicParks model, PublicParks views, and PublicParks routes. We had a <em>public_park_id</em> as a foreign key in another of our tables, and we had <em>public_parks</em> objects throughout our code. This was all fine when we were working on our MVP, but it created problems when we expanded our project to let users add public restrooms in other types of venues such as restaurants and stores. Each of our parks had a &ldquo;show&rdquo; page with the path &ldquo;/public_parks.&rdquo; But this URL wouldn&rsquo;t make sense for a restaurant or bookstore. And anyone looking at our code would be confused by a <em>public parks</em> table that also included stores and restaurants, or <em>public_park</em> objects that weren&rsquo;t parks. What to do?</p>

<p>We realized we had a couple of options. One, we could create a new table called <em>location types</em> and refactor from there. The other option was just to give the <em>public parks</em> table, files, objects, and routes a new name. Which choice was better?</p>

<p><img src="http://jeffslutzky.github.io/images/cookie.jpg"><br>
<a href="https://twitter.com/thirdmanlabs/status/445985883414872064">credit</a></p>

<p>We realized that, given the features we were planning, there was no need to create a separate table of location types. There was nothing that separated one type of location from another: whether the restroom was in a park, store, or restaurant, our users would be able to rate it on a scale from 1 to 10 and write a review. Therefore, we decided to rename our <em>public parks</em> table, controllers, views, models, and routes as <em>restrooms</em>. Had we wanted to add any features that applied only to stores or restaurants &ndash; such as operating hours &ndash; it might have made more sense to create separate location types. But since we were creating a fairly simple website, it made more sense to put every location in one table and not differentiate.</p>

<p>But we actually <em>did</em> add a column for location type to our parks table, which gets assigned when a user adds a restroom to the site. The user selects a choice from a dropdown table to categorize the restroom as a park, restaurant, or store. If, in the future, we decide to do different things for these different location types, we have a way to distinguish them without tediously going through all our locations and assigning them location types, one by one.</p>

<p>Depending on your MVP and the features you expect to add later, you&rsquo;ll have to figure out the best way to structure your code from the start and what you&rsquo;ll have to do to refactor your code later. As I go through my career and work on more complicated projects, I look forward to learning more about how to plan my code and refactor it. Revising code can be just as fun and challenging as writing it.</p>

<p><img src="http://jeffslutzky.github.io/images/tree.jpg"><br>
<a href="https://www.pinterest.com/pin/433893745324229364/">credit</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Back to the Future With Cron Jobs and Ruby Gems]]></title>
    <link href="http://jeffslutzky.github.io/blog/2015/10/21/back-to-the-future-with-cron-jobs-and-ruby-gems/"/>
    <updated>2015-10-21T08:25:00-04:00</updated>
    <id>http://jeffslutzky.github.io/blog/2015/10/21/back-to-the-future-with-cron-jobs-and-ruby-gems</id>
    <content type="html"><![CDATA[<p>It&rsquo;s <em>Back to the Future</em> Day!</p>

<iframe width="840" height="473" src="https://www.youtube.com/embed/nT9Drje0Fwc" frameborder="0" allowfullscreen></iframe>


<p><em>Back to the Future</em> is my all-time favorite movie &ndash;  and the sequels are a close second and third &ndash; so this is a pretty special day. To celebrate, I&rsquo;ll discuss time travel!</p>

<p>Sort of. I&rsquo;ll discuss cron jobs.</p>

<p>A cron job is a way to schedule tasks ahead of time in Unix-type command-line systems such as the Mac Terminal &ndash; for example, sending out an email, updating a file at the same time every day, and so on. Tasks can be scheduled for a particular time or at regular intervals &ndash; daily, weekly, etc.</p>

<p>I decided I wanted to post the following tweet on October 21, 2015, at 4:29 pm, to celebrate Marty McFly&rsquo;s arrival from 1985:</p>

<pre>Yes, it's October 21, 2015 at 4:29 pm...

...on the East Coast.

But Hill Valley is in California. Three hours to go.

#BackToTheFuture</pre>


<p>I wanted to preschedule my tweet, so it could go out even if I&rsquo;m away from my computer at the time (as long as my computer is running). First I tried some web apps, but I couldn&rsquo;t get tweets to appear at the exact time I wanted. So I turned to the command line. Here&rsquo;s how this works.</p>

<!-- more -->


<p><em>(1) Using the &ldquo;t&rdquo; Ruby gem</em></p>

<p>The first step is to install <a href="https://github.com/sferik/t">a Ruby gem called t</a>, which provides command-line access to Twitter:</p>

<pre>gem install t</pre>


<p>After connecting your Twitter account to the gem by following the instructions on the gem&rsquo;s <a href="https://github.com/sferik/t">GitHub page</a>, you can tweet directly from the command line by typing</p>

<pre>t update "[text of your tweet]"</pre>


<p>The text of your tweet will immediately show up on Twitter as a tweet from your account.</p>

<p>But what if you want to pre-schedule a tweet? What if you want to run the above command not now, but later? You&rsquo;ll need to set up a <a href="https://en.wikipedia.org/wiki/Cron">cron job</a>.</p>

<p><em>(2) Setting up a cron job</em></p>

<p>This involves two steps: (a) setting up a file that contains your &ldquo;t&rdquo; command, and (b) setting up the actual cron job.</p>

<p><em>(a) Setting up the file containing your &ldquo;t&rdquo; command</em></p>

<p>The best place to create this file (or shell script) is in your home directory. To find out where this is, type:</p>

<pre>echo $HOME</pre>


<p>My home directory is &ldquo;Users/[myname].&rdquo;</p>

<p>You can go there directly by typing</p>

<pre>cd $HOME</pre>


<p>In your home directory, create a new file with a .sh extension, which is the extension for a shell script:</p>

<pre>touch [filename].sh</pre>


<p>Open this empty file in your text editor. At the top of the empty file, type</p>

<pre>#!/bin/bash</pre>


<p>(The exact path might be different on different computers, but this worked for me on a Mac.)</p>

<p>Next, you can type the &ldquo;t&rdquo; update command, but you have to preface the &ldquo;t&rdquo; with something. Ruby Version Manager (rvm) creates wrappers for gems, and you need to preface the &ldquo;t&rdquo; with the path for the wrappers. <a href="https://rvm.io/deployment/cron">This link</a> helped me figure that path out. For me, that path is /Users/jeffslutzky/.rvm/wrappers/ruby-2.2.3, so the full path to &ldquo;t&rdquo; is:</p>

<pre>/Users/jeffslutzky/.rvm/wrappers/ruby-2.2.3/t</pre>


<p>And therefore the full command is:</p>

<pre>/Users/jeffslutzky/.rvm/wrappers/ruby-2.2.3/t update "[tweet text]"</pre>


<p>So the full file is these two lines:</p>

<pre>#!/bin/bash

/Users/jeffslutzky/.rvm/wrappers/ruby-2.2.3/t update "[tweet text]"</pre>


<p>After creating the shell script, we have to change its permissions, by going back to the command line and typing</p>

<pre>chmod +x [filename].sh</pre>


<p>After creating the shell script and setting its permissions, the next step is to set up the cron job.</p>

<p><em>(b) Setting up the cron job</em></p>

<p>We&rsquo;re actually setting up a crontab, which is the text file that contains the schedule of tasks. I was having problems using my default text editor, Sublime, for crontabs, so I had to set my default crontab editor to Nano by typing this on the command line:</p>

<pre>export VISUAL=nano; crontab -e</pre>


<p>After that, open the crontab file by typing:</p>

<pre>crontab -e</pre>


<p>This file requires one line containing two things: a series of five numbers corresponding to the time we want the task to run, and the path to the shell script we just wrote.</p>

<p>The numbers come in this order: minutes, hours (in 24-hour format), days of month, months, days of week. I don&rsquo;t care about the day of the week, so I can replace that with an asterisk (*). For example, October 21 at 4:29 pm (i.e. 10/21 at 16:29) is:</p>

<pre>29 16 21 10 *</pre>


<p>That&rsquo;s just <em>10/21 - 16:29</em> in reverse order.</p>

<p>The path to my shell script is:</p>

<pre>/Users/jeffslutzky/bttf.sh</pre>


<p>So, adding this to the time, the full line to type in for this task is:</p>

<pre>29 16 21 10 * /Users/jeffslutzky/bttf.sh</pre>


<p>Save the file. That&rsquo;s it. The tweet is now pre-scheduled. We&rsquo;re all done!</p>

<p>To see the contents of the crontab, type:</p>

<pre>crontab -l</pre>


<p>To edit it again, type:</p>

<pre>crontab -e</pre>


<p>You can even add other tasks to the crontab file by adding a new line with a new time and shell script path.</p>

<p>I&rsquo;ve actually pre-scheduled two tweets. If my calculations are correct, when this baby hits 88 miles per hour, you&rsquo;re gonna see some serious tweets (at <a href="http://twitter.com/tinmanic">twitter.com/tinmanic</a>).</p>

<p>To recap:</p>

<p>(1) Create a file with an .sh extension containing a command-line action, and set the file permissions.</p>

<pre>#!/bin/bash

/Users/jeffslutzky/.rvm/wrappers/ruby-2.2.3/t update "[tweet text]"</pre>


<p>(2) Create a new task in the crontab to execute the above file at a chosen time.</p>

<pre>29 16 21 10 * /Users/jeffslutzky/bttf.sh</pre>


<p><em>Helpful links</em></p>

<ul>

<li><a href="https://github.com/sferik/t">the "t" Ruby gem</a></li>

<li><a href="https://developer.apple.com/library/mac/documentation/OpenSource/Conceptual/ShellScripting">Mac Developer Library: Shell Scripting Primer</a></li>

<li><a href="https://rvm.io/deployment/cron">Using RVM with Cron</a></li>

<li><a href="http://www.backtothefuture.com/">Back to the Future fan site</a></li>

<li><a href="http://www.october212015.com/">Countdown to Back to the Future Day</a></li>
</ul>


<p><img src="http://jeffslutzky.github.io/images/delorean.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sublime Hints and Shortcuts]]></title>
    <link href="http://jeffslutzky.github.io/blog/2015/10/04/sublime-hints-and-shortcuts/"/>
    <updated>2015-10-04T16:14:16-04:00</updated>
    <id>http://jeffslutzky.github.io/blog/2015/10/04/sublime-hints-and-shortcuts</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve completed my first week as a student in the <a href="http://www.flatironschool.com">Flatiron School&rsquo;s</a> Web Development Immersive program. It&rsquo;s been exciting and fun and busy and I&rsquo;ve met friendly, interesting people. It&rsquo;s the best experience I&rsquo;ve had in ages.</p>

<p>In this blog post I&rsquo;ll cover <a href="http://www.sublimetext.com/">Sublime</a>. Sublime is the default text editor we use at the Flatiron School; we use it to write all our Ruby programs, and I&rsquo;m using it to write this very blog post. Besides Terminal, it&rsquo;s probably the program we use most often. Therefore, knowing some Sublime tips and shortcuts can help a programmer become much more efficient. One of our instructors sent us a link to a <a href="http://sublime-text-unofficial-documentation.readthedocs.org/en/latest/reference/keyboard_shortcuts_osx.html">whole bunch of Sublime shortcuts</a>. I thought I&rsquo;d cover some of those, and some other tips I&rsquo;ve found most useful so far:</p>

<!-- more -->


<p><em>Setting up your visual environment.</em> Since you&rsquo;ll be staring at the Sublime interface all the time, you&rsquo;ll want the screen to look pleasant. The default environment for Sublime is light text on a black background. I find that to be hard on my eyes, but fortunately you can change this. In the menu, go to Sublime Text > Preferences > Color Scheme. Under this menu, Flatiron&rsquo;s Sublime installation has an option called Colorsublime-Themes, where you can pick Solarized Dark or Solarized Light. I use Solarized Light, which gives you a soothing beige background:</p>

<p><img src="http://jeffslutzky.github.io/images/solarized_light.png"></p>

<p>There are a ton of other options in the menu under Color Scheme - Default.</p>

<p><em>Multiple column view.</em> Most Flatiron labs require getting certain tests to pass. It can be helpful to be able to look at your code and the test at the same time, especally when the test includes some data, such as a sample hash that you need to transform into another hash, or some supplied variables. To do this, you can press OPTION+CONTROL plus the number of columns you want. Pressing OPTION+CTRL+2 will give you two columns, and then you can drag any of the open tabs to any column:</p>

<p><img src="http://jeffslutzky.github.io/images/two_column_view.png"></p>

<p>Since this will give you narrower columns, you can then go to the menu bar and select View > Word Wrap so everything remains on the screen.</p>

<p>To switch back to single-column view, press OPTION+CTRL+1.</p>

<p><em>Comment out a line from anywhere on that line.</em> Often I&rsquo;m using binding.pry to look into my program, but then I want to stop using binding.pry and just see if my tests pass. Instead of repeatedly typing and deleting &ldquo;binding.pry,&rdquo; you can just comment it out by typing COMMAND and the slash key (/). The nice thing is that you don&rsquo;t even have to be on the beginning of the line. If you type COMMAND + / from anywhere on that line, it will put a pound sign at the beginning of the line and comment out the whole line. To un-comment a line, just press COMMAND + / again.</p>

<p><em>Replace every instance of some text with different text.</em> Sometimes you&rsquo;ve named a variable but later decide you want to change it to something else. You can easily change every instance of the variable in your program. Just highlight any instance of the text, and <em>every</em> instance of that text will then have an outline around it:</p>

<p><img src="http://jeffslutzky.github.io/images/highlighted_text.png"></p>

<p>Now, press CTRL+COMMAND+G and you can then edit every single instance of that text at once! Everything you type will affect every instance of that text in your program:</p>

<p><img src="http://jeffslutzky.github.io/images/edited_text.png"></p>

<p>When you&rsquo;re done, click anywhere in your program to stop. So cool.</p>

<p>(Just be careful - if your program contains, for example, &ldquo;item&rdquo; and &ldquo;items,&rdquo; you won&rsquo;t be able to edit &ldquo;item&rdquo; without also editing &ldquo;items.&rdquo;)</p>

<p><em>Move an entire chunk of text up or down.</em> If you want to move some text to a different part of your program - for example, if you want to rearrange the order of your methods - just highlight the lines of text you want to move, then click CTRL-COMMAND and the up-arrow or down-arrow. The entire chunk of text will move up or down a line each time you click.</p>

<p>There are so many other shortcuts in Sublime. It would be hard to <a href="http://sublime-text-unofficial-documentation.readthedocs.org/en/latest/reference/keyboard_shortcuts_osx.html">memorize them all at once</a>, but the more I use Sublime, the more I&rsquo;ll probably become familiar with them. You will, too.</p>

<p>Sublime is&hellip; sublime.</p>
]]></content>
  </entry>
  
</feed>
